aliases:
  disc-categories: "!f(){ owner=\"$1\"; repo=\"$2\"; if [ -z \"$owner\" ] || [ -z \"$repo\" ]; then echo \"Usage: gh disc-categories <owner> <repo>\" >&2; exit 1; fi; gh api graphql -f owner=\"$owner\" -f name=\"$repo\" -f query='query($owner: String!, $name: String!) { repository(owner: $owner, name: $name) { discussionCategories(first: 100) { nodes { id name description isAnswerable } } } }' --jq '.data.repository.discussionCategories.nodes'; }; f"
  disc-category-discussions: "!f(){ owner=\"$1\"; repo=\"$2\"; category=\"$3\"; answered_arg=\"$4\"; if [ -z \"$owner\" ] || [ -z \"$repo\" ] || [ -z \"$category\" ]; then echo \"Usage: gh disc-category-discussions <owner> <repo> <categoryId> [answered|unanswered|true|false|any]\" >&2; exit 1; fi; case \"$answered_arg\" in answered|true) answered_flag=\"true\" ;; unanswered|false) answered_flag=\"false\" ;; ''|any) answered_flag='' ;; *) echo \"Optional answered argument must be answered, unanswered, true, false, or any\" >&2; exit 1 ;; esac; args=(graphql -f owner=\"$owner\" -f name=\"$repo\" -f categoryId=\"$category\" -f query='query($owner: String!, $name: String!, $categoryId: ID!, $answered: Boolean) { repository(owner: $owner, name: $name) { discussions(first: 50, orderBy: { field: CREATED_AT, direction: DESC }, categoryId: $categoryId, answered: $answered) { nodes { id number title url createdAt answerChosenAt isAnswered closed author { login } } } } }'); if [ -n \"$answered_flag\" ]; then args+=(-f answered=\"$answered_flag\"); fi; gh api \"${args[@]}\" --jq '.data.repository.discussions.nodes | map(. + {state: (if .closed then \"CLOSED\" else \"OPEN\" end)})'; }; f"
  disc-comments: "!f(){ owner=\"$1\"; repo=\"$2\"; number=\"$3\"; if [ -z \"$owner\" ] || [ -z \"$repo\" ] || [ -z \"$number\" ]; then echo \"Usage: gh disc-comments <owner> <repo> <discussionNumber>\" >&2; exit 1; fi; gh api graphql -f owner=\"$owner\" -f name=\"$repo\" -f number=\"$number\" -f query='query($owner: String!, $name: String!, $number: Int!) { repository(owner: $owner, name: $name) { discussion(number: $number) { id title url comments(first: 100) { nodes { id url createdAt updatedAt replyTo { id } author { login } body } } } } }' --jq '.data.repository.discussion.comments.nodes'; }; f"
  disc-reply: "!f(){ owner=\"$1\"; repo=\"$2\"; number=\"$3\"; reply_to=\"$4\"; shift 4; body=\"$*\"; if [ -z \"$owner\" ] || [ -z \"$repo\" ] || [ -z \"$number\" ] || [ -z \"$reply_to\" ]; then echo \"Usage: gh disc-reply <owner> <repo> <discussionNumber> <replyToCommentId> <body>\" >&2; exit 1; fi; if [ -z \"$body\" ]; then echo \"Reply body must be provided as the remaining arguments.\" >&2; exit 1; fi; discussion_id=$(gh api graphql -f owner=\"$owner\" -f name=\"$repo\" -f number=\"$number\" -f query='query($owner: String!, $name: String!, $number: Int!) { repository(owner: $owner, name: $name) { discussion(number: $number) { id } } }' --jq '.data.repository.discussion.id'); if [ -z \"$discussion_id\" ] || [ \"$discussion_id\" = \"null\" ]; then echo \"Unable to resolve discussion id\" >&2; exit 1; fi; gh api graphql -f discussionId=\"$discussion_id\" -f replyToId=\"$reply_to\" -f body=\"$body\" -f query='mutation($discussionId: ID!, $replyToId: ID!, $body: String!) { addDiscussionComment(input: { discussionId: $discussionId, replyToId: $replyToId, body: $body }) { comment { id url createdAt body } } }' --jq '.data.addDiscussionComment.comment'; }; f"
